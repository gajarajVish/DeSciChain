"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.algorandFixture = void 0;
const __1 = require("../");
const __2 = require("../../");
/**
 * Creates a test fixture for automated testing against Algorand.
 * By default it tests against an environment variable specified client
 *  if the standard environment variables are specified, otherwise against
 *  a default LocalNet instance, but you can pass in an algod, indexer
 *  and/or kmd if you want to test against an explicitly defined network.
 *
 * @example ```typescript
 * const algorand = algorandFixture()
 *
 * beforeEach(algorand.beforeEach, 10_000)
 *
 * test('My test', async () => {
 *     const {algod, indexer, testAccount, ...} = algorand.context
 *     // test things...
 * })
 * ```
 *
 * @param fixtureConfig The fixture configuration
 * @returns The fixture
 */
const algorandFixture = (fixtureConfig) => {
    const algodConfig = process && process.env && process.env.ALGOD_SERVER ? (0, __2.getAlgodConfigFromEnvironment)() : (0, __2.getDefaultLocalNetConfig)('algod');
    const indexerConfig = process && process.env && process.env.INDEXER_SERVER ? (0, __2.getIndexerConfigFromEnvironment)() : (0, __2.getDefaultLocalNetConfig)('indexer');
    const kmdConfig = process && process.env && process.env.ALGOD_SERVER
        ? { ...algodConfig, port: process?.env?.KMD_PORT ?? '4002' }
        : (0, __2.getDefaultLocalNetConfig)('kmd');
    const algod = fixtureConfig?.algod ?? (0, __2.getAlgoClient)(algodConfig);
    const indexer = fixtureConfig?.indexer ?? (0, __2.getAlgoIndexerClient)(indexerConfig);
    const kmd = fixtureConfig?.kmd ?? (0, __2.getAlgoKmdClient)(kmdConfig);
    let context;
    const beforeEach = async () => {
        __2.Config.configure({ debug: true });
        const transactionLogger = new __1.TransactionLogger();
        const transactionLoggerAlgod = transactionLogger.capture(algod);
        context = {
            algod: transactionLoggerAlgod,
            indexer: indexer,
            kmd: kmd,
            testAccount: await (0, __1.getTestAccount)({ initialFunds: fixtureConfig?.testAccountFunding ?? (0, __2.algos)(10), suppressLog: true }, transactionLoggerAlgod, kmd),
            generateAccount: (params) => (0, __1.getTestAccount)(params, transactionLoggerAlgod, kmd),
            transactionLogger: transactionLogger,
            waitForIndexer: () => transactionLogger.waitForIndexer(indexer),
            waitForIndexerTransaction: (transactionId) => (0, __1.runWhenIndexerCaughtUp)(() => (0, __2.lookupTransactionById)(transactionId, indexer)),
        };
    };
    return {
        get context() {
            return context;
        },
        beforeEach,
    };
};
exports.algorandFixture = algorandFixture;
//# sourceMappingURL=algorand-fixture.js.map