{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/fractional-realestate-ts/projects/fractional-realestate-ts-contracts/smart_contracts/FractionalRealEstate/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAoKG;;AAAA;AAAA;AAAA;;AAAA;AApKH;;;AAAA;AAoKG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvFA;;AAAA;AAAA;AAAA;;AAAA;AA7EH;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6EG;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1DA;;AAAA;AAAA;AAAA;;AAAA;AAnBH;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAmBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAmBE;;;AA8BoB;AAEH;;AAAA;AAA6B;AAA7B;;AAAA;AAA6B;AAA7B;;AAAA;;AAAA;AAAgC;AAAhC;;AAAA;AAAgC;AAAhC;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAIK;;AACA;;;;;AAFN;;;;;;;AAFA;;;;;;;;;;AAHI;;;;AAQT;;;AARS;;;AAvBP;AAAA;AAAA;;;AAAA;;AAAA;AACI;;AAAA;AAEE;;AAAA;AACE;;AAAA;AACkB;;AANd;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AArB6C;AAAA;;AAAA;AA+BpE;AAAA;;AAAA;AAAA;AAEA;AAwCF;;;AAGS;;AAAA;AA5E6D;AAAA;AAAA;AA4E3B;AAAA;AAAA;;AAAzC;AACmD;AAAA;AAAA;AAGpC;;AAAA;;AAA2C;;AAAd;;AAAc;AAAhC;;AAAA;AAAnB;;AAAA;AAAP;AAEe;;AAAA;;AAAoB;;AAA5B;AAAP;AAEe;;AAAA;;AAAe;;AAAvB;AAAP;AAE0C;;AAAhB;;AAAgB;AAAnC;;AAAA;;AAAA;AAAP;AAGM;;AAAuB;;AAAgB;AACd;;AAmB/B;;;;;;;;;AAAA;;;;AAKS;;;AALT;AAhB+C;;AAAA;;;AAkC/C;;;;;;AAAA;;;AAIS;;;AAJT;AA/BuC;;AAAA;AAiDkB;;AAAA;AAAA;AAGtC;AAAA;AAFsB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAnB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKtB;;AAAA;;AAAA;AArDO;AAAP;AA8DF;;;AAES;;AAAA;AAlK6D;AAAA;AAAA;AAkK3B;AAAA;AAAA;;AAAzC;AAEyC;AAAA;AAAzC",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 \"properties\" 0x0042"
    },
    "27": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "29": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "32": {
      "op": "pushbytess 0xec1b0fad 0x0a3de51c 0xf3ce5184 // method \"createPropertyListing(string,uint64,uint64)uint64\", method \"purchaseFromLister(uint64,uint64,pay)bool\", method \"getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)\"",
      "defined_out": [
        "Method(createPropertyListing(string,uint64,uint64)uint64)",
        "Method(getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address))",
        "Method(purchaseFromLister(uint64,uint64,pay)bool)"
      ],
      "stack_out": [
        "Method(createPropertyListing(string,uint64,uint64)uint64)",
        "Method(purchaseFromLister(uint64,uint64,pay)bool)",
        "Method(getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address))"
      ]
    },
    "49": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createPropertyListing(string,uint64,uint64)uint64)",
        "Method(getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address))",
        "Method(purchaseFromLister(uint64,uint64,pay)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createPropertyListing(string,uint64,uint64)uint64)",
        "Method(purchaseFromLister(uint64,uint64,pay)bool)",
        "Method(getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address))",
        "tmp%2#0"
      ]
    },
    "52": {
      "op": "match main_createPropertyListing_route@3 main_purchaseFromLister_route@4 main_getPropertyInfo_route@5",
      "stack_out": []
    },
    "60": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "return",
      "stack_out": []
    },
    "62": {
      "block": "main_getPropertyInfo_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "64": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "65": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "66": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "68": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "69": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "72": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "73": {
      "callsub": "smart_contracts/FractionalRealEstate/contract.algo.ts::FractionalRealEstate.getPropertyInfo",
      "op": "callsub getPropertyInfo",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "76": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "77": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "78": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "79": {
      "op": "log",
      "stack_out": []
    },
    "80": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "81": {
      "op": "return",
      "stack_out": []
    },
    "82": {
      "block": "main_purchaseFromLister_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "84": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "85": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "86": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "88": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "89": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "92": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "93": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "96": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "97": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "99": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "1"
      ]
    },
    "100": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0"
      ]
    },
    "101": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "102": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "104": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "105": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "106": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "gtxn_idx%0#0"
      ]
    },
    "107": {
      "callsub": "smart_contracts/FractionalRealEstate/contract.algo.ts::FractionalRealEstate.purchaseFromLister",
      "op": "callsub purchaseFromLister",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "110": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "113": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "114": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "116": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "117": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "118": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "119": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "120": {
      "op": "log",
      "stack_out": []
    },
    "121": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "122": {
      "op": "return",
      "stack_out": []
    },
    "123": {
      "block": "main_createPropertyListing_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "125": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "126": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "127": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "129": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "130": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "133": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "136": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "139": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "140": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "143": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "144": {
      "callsub": "smart_contracts/FractionalRealEstate/contract.algo.ts::FractionalRealEstate.createPropertyListing",
      "op": "callsub createPropertyListing",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "147": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "148": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "149": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "150": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "151": {
      "op": "log",
      "stack_out": []
    },
    "152": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "153": {
      "op": "return",
      "stack_out": []
    },
    "154": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "156": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "159": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "161": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "162": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "163": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "164": {
      "op": "return",
      "stack_out": []
    },
    "165": {
      "subroutine": "smart_contracts/FractionalRealEstate/contract.algo.ts::FractionalRealEstate.createPropertyListing",
      "params": {
        "propertyAddress#0": "bytes",
        "shares#0": "uint64",
        "pricePerShare#0": "uint64"
      },
      "block": "createPropertyListing",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "168": {
      "op": "itxn_begin"
    },
    "169": {
      "op": "frame_dig -3",
      "defined_out": [
        "propertyAddress#0 (copy)"
      ],
      "stack_out": [
        "propertyAddress#0 (copy)"
      ]
    },
    "171": {
      "op": "len",
      "defined_out": [
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1"
      ]
    },
    "172": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "0"
      ]
    },
    "173": {
      "op": "dig 1",
      "defined_out": [
        "0",
        "length%0#1",
        "length%0#1 (copy)"
      ],
      "stack_out": [
        "length%0#1",
        "0",
        "length%0#1 (copy)"
      ]
    },
    "175": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "is_out_of_bounds%0#0"
      ]
    },
    "176": {
      "op": "intc_0 // 0",
      "stack_out": [
        "length%0#1",
        "is_out_of_bounds%0#0",
        "0"
      ]
    },
    "177": {
      "op": "dig 2",
      "stack_out": [
        "length%0#1",
        "is_out_of_bounds%0#0",
        "0",
        "length%0#1 (copy)"
      ]
    },
    "179": {
      "op": "uncover 2",
      "stack_out": [
        "length%0#1",
        "0",
        "length%0#1 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "181": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0"
      ]
    },
    "182": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "bounded_index%0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "32"
      ]
    },
    "183": {
      "op": "dig 2",
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "32",
        "length%0#1 (copy)"
      ]
    },
    "185": {
      "op": ">=",
      "defined_out": [
        "bounded_index%0#0",
        "is_out_of_bounds%1#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "186": {
      "op": "intc_2 // 32",
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "is_out_of_bounds%1#0",
        "32"
      ]
    },
    "187": {
      "op": "dig 3",
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "is_out_of_bounds%1#0",
        "32",
        "length%0#1 (copy)"
      ]
    },
    "189": {
      "op": "uncover 2",
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "32",
        "length%0#1 (copy)",
        "is_out_of_bounds%1#0"
      ]
    },
    "191": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "bounded_index%1#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "bounded_index%1#0"
      ]
    },
    "192": {
      "op": "frame_dig -3",
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "bounded_index%1#0",
        "propertyAddress#0 (copy)"
      ]
    },
    "194": {
      "op": "cover 2",
      "stack_out": [
        "length%0#1",
        "propertyAddress#0 (copy)",
        "bounded_index%0#0",
        "bounded_index%1#0"
      ]
    },
    "196": {
      "op": "substring3",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "197": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "199": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "200": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "202": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "204": {
      "op": "intc_0 // 0",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "0"
      ]
    },
    "205": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "207": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "length%0#1",
        "shares#0 (copy)"
      ],
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "shares#0 (copy)"
      ]
    },
    "209": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "211": {
      "op": "pushbytes \"PROP\"",
      "defined_out": [
        "\"PROP\"",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "\"PROP\""
      ]
    },
    "217": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "219": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "length%0#1"
      ]
    },
    "221": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "3"
      ]
    },
    "223": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "length%0#1"
      ]
    },
    "225": {
      "op": "intc_0 // 0",
      "stack_out": [
        "length%0#1",
        "0"
      ]
    },
    "226": {
      "op": "itxn_field Fee",
      "stack_out": [
        "length%0#1"
      ]
    },
    "228": {
      "op": "itxn_submit"
    },
    "229": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "length%0#1",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "length%0#1",
        "txnResult.CreatedAssetID#0"
      ]
    },
    "231": {
      "op": "swap",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "length%0#1"
      ]
    },
    "232": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "as_bytes%0#0"
      ]
    },
    "233": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "length_uint16%0#0"
      ]
    },
    "236": {
      "op": "frame_dig -3",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "length_uint16%0#0",
        "propertyAddress#0 (copy)"
      ]
    },
    "238": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0"
      ]
    },
    "239": {
      "op": "frame_dig -2",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "shares#0 (copy)"
      ]
    },
    "241": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "242": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_value%0#0",
        "pricePerShare#0 (copy)",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "pricePerShare#0 (copy)"
      ]
    },
    "244": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "245": {
      "op": "dig 3",
      "defined_out": [
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "txnResult.CreatedAssetID#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "txnResult.CreatedAssetID#0 (copy)"
      ]
    },
    "247": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "248": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%0#0"
      ]
    },
    "250": {
      "op": "bytec_2 // 0x0042",
      "defined_out": [
        "0x0042",
        "encoded_value%0#0",
        "tmp%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%0#0",
        "0x0042"
      ]
    },
    "251": {
      "op": "dig 4",
      "defined_out": [
        "0x0042",
        "encoded_value%0#0",
        "tmp%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%0#0",
        "0x0042",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "253": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "254": {
      "op": "uncover 4",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "256": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "257": {
      "op": "uncover 3",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%3#0",
        "tmp%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "259": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%3#0",
        "tmp%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "260": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%3#0",
        "val_as_bytes%3#0 (copy)"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%3#0",
        "tmp%0#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%3#0 (copy)"
      ]
    },
    "262": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%3#0",
        "tmp%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "263": {
      "op": "swap",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%5#0",
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "265": {
      "op": "uncover 2",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ]
    },
    "267": {
      "op": "concat",
      "defined_out": [
        "propertyStruct#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%3#0",
        "propertyStruct#0"
      ]
    },
    "268": {
      "op": "bytec_1 // \"properties\"",
      "defined_out": [
        "\"properties\"",
        "propertyStruct#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%3#0",
        "propertyStruct#0",
        "\"properties\""
      ]
    },
    "269": {
      "op": "uncover 2",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "propertyStruct#0",
        "\"properties\"",
        "val_as_bytes%3#0"
      ]
    },
    "271": {
      "op": "concat",
      "defined_out": [
        "propertyStruct#0",
        "tmp%2#0",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "propertyStruct#0",
        "tmp%2#0"
      ]
    },
    "272": {
      "op": "dup",
      "defined_out": [
        "propertyStruct#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "propertyStruct#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "273": {
      "op": "box_del",
      "defined_out": [
        "propertyStruct#0",
        "tmp%2#0",
        "txnResult.CreatedAssetID#0",
        "{box_del}"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "propertyStruct#0",
        "tmp%2#0",
        "{box_del}"
      ]
    },
    "274": {
      "op": "pop",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "propertyStruct#0",
        "tmp%2#0"
      ]
    },
    "275": {
      "op": "swap",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "tmp%2#0",
        "propertyStruct#0"
      ]
    },
    "276": {
      "op": "box_put",
      "stack_out": [
        "txnResult.CreatedAssetID#0"
      ]
    },
    "277": {
      "retsub": true,
      "op": "retsub"
    },
    "278": {
      "subroutine": "smart_contracts/FractionalRealEstate/contract.algo.ts::FractionalRealEstate.purchaseFromLister",
      "params": {
        "propertyId#0": "uint64",
        "shares#0": "uint64",
        "payment#0": "uint64"
      },
      "block": "purchaseFromLister",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "281": {
      "op": "frame_dig -3",
      "defined_out": [
        "propertyId#0 (copy)"
      ],
      "stack_out": [
        "propertyId#0 (copy)"
      ]
    },
    "283": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "284": {
      "op": "bytec_1 // \"properties\"",
      "defined_out": [
        "\"properties\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"properties\""
      ]
    },
    "285": {
      "op": "swap",
      "stack_out": [
        "\"properties\"",
        "tmp%0#0"
      ]
    },
    "286": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "287": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "288": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "289": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "291": {
      "error": "Property not listed",
      "op": "assert // Property not listed",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "292": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "293": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "property#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "maybe_exists%1#0"
      ]
    },
    "294": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "property#0"
      ]
    },
    "295": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)",
        "property#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "payment#0 (copy)"
      ]
    },
    "297": {
      "op": "gtxns Amount",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0"
      ]
    },
    "299": {
      "op": "dig 1",
      "defined_out": [
        "amount#0",
        "property#0",
        "property#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "property#0 (copy)"
      ]
    },
    "301": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "amount#0",
        "property#0",
        "property#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "property#0 (copy)",
        "18"
      ]
    },
    "303": {
      "op": "extract_uint64",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%6#0"
      ]
    },
    "304": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0",
        "property#0",
        "shares#0 (copy)",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%6#0",
        "shares#0 (copy)"
      ]
    },
    "306": {
      "op": "*",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%7#0"
      ]
    },
    "307": {
      "op": "dig 1",
      "defined_out": [
        "amount#0",
        "amount#0 (copy)",
        "property#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%7#0",
        "amount#0 (copy)"
      ]
    },
    "309": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%8#0"
      ]
    },
    "310": {
      "error": "Invalid payment amount",
      "op": "assert // Invalid payment amount",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0"
      ]
    },
    "311": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "payment#0 (copy)"
      ]
    },
    "313": {
      "op": "gtxns Receiver",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%9#0"
      ]
    },
    "315": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "317": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%11#0"
      ]
    },
    "318": {
      "error": "Invalid payment receiver",
      "op": "assert // Invalid payment receiver",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0"
      ]
    },
    "319": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "payment#0 (copy)"
      ]
    },
    "321": {
      "op": "gtxns Sender",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%12#0"
      ]
    },
    "323": {
      "op": "txn Sender",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "325": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%14#0"
      ]
    },
    "326": {
      "error": "Invalid payment sender",
      "op": "assert // Invalid payment sender",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0"
      ]
    },
    "327": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "property#0 (copy)"
      ]
    },
    "329": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "amount#0",
        "property#0",
        "property#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "property#0 (copy)",
        "10"
      ]
    },
    "331": {
      "op": "extract_uint64",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0"
      ]
    },
    "332": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "shares#0 (copy)"
      ]
    },
    "334": {
      "op": "dig 1",
      "defined_out": [
        "amount#0",
        "property#0",
        "shares#0 (copy)",
        "tmp%1#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "shares#0 (copy)",
        "tmp%16#0 (copy)"
      ]
    },
    "336": {
      "op": "<=",
      "defined_out": [
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "337": {
      "error": "Not enough shares",
      "op": "assert // Not enough shares",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0"
      ]
    },
    "338": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "property#0 (copy)"
      ]
    },
    "340": {
      "op": "pushint 26 // 26",
      "defined_out": [
        "26",
        "amount#0",
        "property#0",
        "property#0 (copy)",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "property#0 (copy)",
        "26"
      ]
    },
    "342": {
      "op": "extract_uint64",
      "defined_out": [
        "amount#0",
        "asset#0",
        "property#0",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "asset#0"
      ]
    },
    "343": {
      "op": "txn Sender",
      "defined_out": [
        "amount#0",
        "asset#0",
        "property#0",
        "receiver#0",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "asset#0",
        "receiver#0"
      ]
    },
    "345": {
      "op": "itxn_begin"
    },
    "346": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "asset#0",
        "receiver#0",
        "shares#0 (copy)"
      ]
    },
    "348": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "asset#0",
        "receiver#0"
      ]
    },
    "350": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "asset#0"
      ]
    },
    "352": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0"
      ]
    },
    "354": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "4"
      ]
    },
    "356": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0"
      ]
    },
    "358": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0",
        "property#0",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0",
        "0"
      ]
    },
    "359": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0",
        "property#0",
        "amount#0",
        "tmp%16#0"
      ]
    },
    "361": {
      "op": "itxn_submit"
    },
    "362": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "amount#0",
        "tmp%16#0",
        "property#0"
      ]
    },
    "364": {
      "error": "Index access is out of bounds",
      "op": "extract 34 32 // on error: Index access is out of bounds",
      "defined_out": [
        "amount#0",
        "ownerAddress#0",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "amount#0",
        "tmp%16#0",
        "ownerAddress#0"
      ]
    },
    "367": {
      "op": "itxn_begin"
    },
    "368": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%1#0",
        "amount#0",
        "tmp%16#0"
      ]
    },
    "370": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%16#0",
        "amount#0"
      ]
    },
    "371": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%1#0",
        "tmp%16#0"
      ]
    },
    "373": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%16#0",
        "1"
      ]
    },
    "374": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0",
        "tmp%16#0"
      ]
    },
    "376": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%16#0",
        "0"
      ]
    },
    "377": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0",
        "tmp%16#0"
      ]
    },
    "379": {
      "op": "itxn_submit"
    },
    "380": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "tmp%16#0",
        "shares#0 (copy)"
      ]
    },
    "382": {
      "op": "-",
      "defined_out": [
        "newAvailableShares#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "newAvailableShares#0"
      ]
    },
    "383": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "newAvailableShares#0",
        "tmp%1#0 (copy)"
      ]
    },
    "385": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "newAvailableShares#0",
        "propertyStruct#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "newAvailableShares#0",
        "propertyStruct#0",
        "maybe_exists%0#0"
      ]
    },
    "386": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "newAvailableShares#0",
        "propertyStruct#0"
      ]
    },
    "387": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "newAvailableShares#0"
      ]
    },
    "388": {
      "op": "itob",
      "defined_out": [
        "propertyStruct#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0"
      ]
    },
    "389": {
      "op": "dig 1",
      "defined_out": [
        "propertyStruct#0",
        "propertyStruct#0 (copy)",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "propertyStruct#0 (copy)"
      ]
    },
    "391": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "propertyStruct#0 (copy)",
        "0"
      ]
    },
    "392": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "propertyStruct#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0"
      ]
    },
    "393": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0",
        "propertyStruct#0 (copy)"
      ]
    },
    "395": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "propertyStruct#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "396": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "propertyStruct#0 (copy)"
      ]
    },
    "398": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "propertyStruct#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "400": {
      "op": "substring3",
      "defined_out": [
        "propertyStruct#0",
        "tmp%1#0",
        "tmp%2#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "tmp%2#1"
      ]
    },
    "401": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "tmp%2#1",
        "propertyStruct#0 (copy)"
      ]
    },
    "403": {
      "error": "Index access is out of bounds",
      "op": "extract 2 8 // on error: Index access is out of bounds",
      "defined_out": [
        "propertyStruct#0",
        "tmp%1#0",
        "tmp%2#1",
        "tmp%3#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%3#1"
      ]
    },
    "406": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%3#1",
        "propertyStruct#0 (copy)"
      ]
    },
    "408": {
      "error": "Index access is out of bounds",
      "op": "extract 18 8 // on error: Index access is out of bounds",
      "defined_out": [
        "propertyStruct#0",
        "tmp%1#0",
        "tmp%2#1",
        "tmp%3#1",
        "tmp%4#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "411": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%3#1",
        "tmp%4#1",
        "propertyStruct#0 (copy)"
      ]
    },
    "413": {
      "error": "Index access is out of bounds",
      "op": "extract 26 8 // on error: Index access is out of bounds",
      "defined_out": [
        "propertyStruct#0",
        "tmp%1#0",
        "tmp%2#1",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%5#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "propertyStruct#0",
        "val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "416": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%5#1",
        "propertyStruct#0"
      ]
    },
    "418": {
      "error": "Index access is out of bounds",
      "op": "extract 34 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#1",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%5#1",
        "tmp%6#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%5#1",
        "tmp%6#1"
      ]
    },
    "421": {
      "op": "bytec_2 // 0x0042",
      "defined_out": [
        "0x0042",
        "tmp%1#0",
        "tmp%2#1",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%5#1",
        "tmp%6#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%5#1",
        "tmp%6#1",
        "0x0042"
      ]
    },
    "422": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%4#1",
        "tmp%5#1",
        "tmp%6#1",
        "0x0042",
        "tmp%3#1"
      ]
    },
    "424": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%2#1",
        "tmp%4#1",
        "tmp%5#1",
        "tmp%6#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%4#1",
        "tmp%5#1",
        "tmp%6#1",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "425": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#1",
        "tmp%4#1",
        "tmp%5#1",
        "tmp%6#1",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "427": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%2#1",
        "tmp%4#1",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#1",
        "tmp%4#1",
        "tmp%5#1",
        "tmp%6#1",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "428": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#1",
        "tmp%5#1",
        "tmp%6#1",
        "encoded_tuple_buffer%3#0",
        "tmp%4#1"
      ]
    },
    "430": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "tmp%2#1",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#1",
        "tmp%5#1",
        "tmp%6#1",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "431": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#1",
        "tmp%6#1",
        "encoded_tuple_buffer%4#0",
        "tmp%5#1"
      ]
    },
    "433": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%1#0",
        "tmp%2#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#1",
        "tmp%6#1",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "434": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#1",
        "encoded_tuple_buffer%5#0",
        "tmp%6#1"
      ]
    },
    "435": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%1#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#1",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "436": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%6#0",
        "tmp%2#1"
      ]
    },
    "437": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0",
        "updatedStruct#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "updatedStruct#0"
      ]
    },
    "438": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "updatedStruct#0",
        "tmp%1#0 (copy)"
      ]
    },
    "440": {
      "op": "box_del",
      "defined_out": [
        "tmp%1#0",
        "updatedStruct#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "updatedStruct#0",
        "{box_del}"
      ]
    },
    "441": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0",
        "updatedStruct#0"
      ]
    },
    "442": {
      "op": "box_put",
      "stack_out": []
    },
    "443": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "444": {
      "retsub": true,
      "op": "retsub"
    },
    "445": {
      "subroutine": "smart_contracts/FractionalRealEstate/contract.algo.ts::FractionalRealEstate.getPropertyInfo",
      "params": {
        "propertyId#0": "uint64"
      },
      "block": "getPropertyInfo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "448": {
      "op": "frame_dig -1",
      "defined_out": [
        "propertyId#0 (copy)"
      ],
      "stack_out": [
        "propertyId#0 (copy)"
      ]
    },
    "450": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "451": {
      "op": "bytec_1 // \"properties\"",
      "defined_out": [
        "\"properties\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"properties\""
      ]
    },
    "452": {
      "op": "swap",
      "stack_out": [
        "\"properties\"",
        "tmp%0#0"
      ]
    },
    "453": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "454": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "455": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "456": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "458": {
      "error": "Property not listed",
      "op": "assert // Property not listed",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "459": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "460": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "461": {
      "retsub": true,
      "op": "retsub"
    }
  }
}