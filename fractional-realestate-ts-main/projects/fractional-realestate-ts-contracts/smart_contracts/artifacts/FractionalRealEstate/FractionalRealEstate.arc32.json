{
    "hints": {
        "createPropertyListing(string,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purchaseFromLister(uint64,uint64,pay)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPropertyInfo(uint64)(string,uint64,uint64,uint64,uint64,address)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PropertyStruct",
                    "elements": [
                        [
                            "address",
                            "string"
                        ],
                        [
                            "totalShares",
                            "uint64"
                        ],
                        [
                            "availableShares",
                            "uint64"
                        ],
                        [
                            "pricePerShare",
                            "uint64"
                        ],
                        [
                            "propertyAssetId",
                            "uint64"
                        ],
                        [
                            "ownerAddress",
                            "address"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FractionalRealEstate",
        "methods": [
            {
                "name": "createPropertyListing",
                "args": [
                    {
                        "type": "string",
                        "name": "propertyAddress",
                        "desc": "The physical address of the property (string)"
                    },
                    {
                        "type": "uint64",
                        "name": "shares",
                        "desc": "Total number of shares to be created (uint64)"
                    },
                    {
                        "type": "uint64",
                        "name": "pricePerShare",
                        "desc": "Price per share in microAlgos (uint64)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The asset ID of the created property token (uint64)"
                },
                "desc": "List a new property for fractional ownership.\n\nSteps:\n1. Creates a new Algorand Standard Asset (ASA) to represent shares in the property.\n2. Constructs a PropertyStruct with all relevant details.\n3. Stores the struct in a BoxMap, using the asset ID as the key."
            },
            {
                "name": "purchaseFromLister",
                "args": [
                    {
                        "type": "uint64",
                        "name": "propertyId",
                        "desc": "The asset ID of the property to buy shares of"
                    },
                    {
                        "type": "uint64",
                        "name": "shares",
                        "desc": "Number of shares to buy"
                    },
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction (must be grouped with the app call)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool",
                    "desc": "True if the purchase is successful"
                },
                "desc": "Purchase shares of a listed property from the original lister.\n\nThis method:\n1. Validates the purchase (checks payment, share availability, etc.).\n2. Transfers the requested number of shares to the buyer using an inner asset transfer.\n3. Pays the property owner using an inner payment transaction.\n4. Updates the available shares in the BoxMap."
            },
            {
                "name": "getPropertyInfo",
                "args": [
                    {
                        "type": "uint64",
                        "name": "propertyId",
                        "desc": "The asset ID of the property"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(string,uint64,uint64,uint64,uint64,address)",
                    "desc": "The PropertyStruct containing the property's information"
                },
                "desc": "Get information about a listed property."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}