[{"/Users/vg/DeSciChain/frontend/src/index.tsx":"1","/Users/vg/DeSciChain/frontend/src/App.tsx":"2","/Users/vg/DeSciChain/frontend/src/SimpleApp.tsx":"3"},{"size":261,"mtime":1757179561680,"results":"4","hashOfConfig":"5"},{"size":11359,"mtime":1757173979775,"results":"6","hashOfConfig":"5"},{"size":2173,"mtime":1757179471412,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3o2ttf",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vg/DeSciChain/frontend/src/index.tsx",[],[],"/Users/vg/DeSciChain/frontend/src/App.tsx",["17","18","19","20","21","22","23","24"],[],"/Users/vg/DeSciChain/frontend/src/SimpleApp.tsx",[],[],{"ruleId":"25","severity":1,"message":"26","line":55,"column":9,"nodeType":"27","messageId":"28","endLine":55,"endColumn":26},{"ruleId":"25","severity":1,"message":"29","line":165,"column":11,"nodeType":"27","messageId":"28","endLine":165,"endColumn":20},{"ruleId":"25","severity":1,"message":"30","line":165,"column":22,"nodeType":"27","messageId":"28","endLine":165,"endColumn":29},{"ruleId":"25","severity":1,"message":"31","line":165,"column":31,"nodeType":"27","messageId":"28","endLine":165,"endColumn":38},{"ruleId":"32","severity":2,"message":"33","line":184,"column":12,"nodeType":"34","messageId":"35","endLine":184,"endColumn":31},{"ruleId":"36","severity":1,"message":"37","line":322,"column":18,"nodeType":"27","messageId":"38","endLine":322,"endColumn":27},{"ruleId":"36","severity":1,"message":"37","line":386,"column":18,"nodeType":"27","messageId":"38","endLine":386,"endColumn":27},{"ruleId":"39","severity":2,"message":"40","line":445,"column":1,"nodeType":"41","endLine":445,"endColumn":46,"fix":"42"},"@typescript-eslint/no-unused-vars","'updateWalletState' is assigned a value but never used.","Identifier","unusedVar","'connected' is assigned a value but never used.","'address' is assigned a value but never used.","'balance' is assigned a value but never used.","react/jsx-no-undef","'WalletConnectButton' is not defined.","JSXIdentifier","undefined","@typescript-eslint/no-use-before-define","'useParams' was used before it was defined.","noUseBeforeDefine","import/first","Import in body of module; reorder to top.","ImportDeclaration",{"range":"43","text":"44"},[0,11335],"/**\n * Main App Component for DeSciChain\n * Handles routing and global state management\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { WalletProvider, useWallet } from './components/WalletConnect';\nimport ModelMarketplace from './components/ModelMarketplace';\nimport ModelPublisher from './components/ModelPublisher';\nimport ModelDownloader from './components/ModelDownloader';\nimport PurchaseFlow from './components/PurchaseFlow';\nimport './App.css';\n\n// Import useParams from react-router-dom\nimport { useParams } from 'react-router-dom';\n\n// Global state interface\ninterface DeSciState {\n  wallet: {\n    connected: boolean;\n    address: string | null;\n    balance: number;\n  };\n  models: {\n    published: any[];\n    purchased: any[];\n  };\n  transactions: {\n    pending: any[];\n    completed: any[];\n  };\n  selectedModel: any | null;\n}\n\n// Main App Component\nconst App: React.FC = () => {\n  const [state, setState] = useState<DeSciState>({\n    wallet: {\n      connected: false,\n      address: null,\n      balance: 0\n    },\n    models: {\n      published: [],\n      purchased: []\n    },\n    transactions: {\n      pending: [],\n      completed: []\n    },\n    selectedModel: null\n  });\n\n  const [showPurchaseFlow, setShowPurchaseFlow] = useState(false);\n\n  // Update state when wallet connects/disconnects\n  const updateWalletState = (walletState: any) => {\n    setState(prev => ({\n      ...prev,\n      wallet: walletState\n    }));\n  };\n\n  const handleModelSelect = (model: any) => {\n    setState(prev => ({\n      ...prev,\n      selectedModel: model\n    }));\n  };\n\n  const handlePurchase = (model: any) => {\n    setState(prev => ({\n      ...prev,\n      selectedModel: model\n    }));\n    setShowPurchaseFlow(true);\n  };\n\n  const handlePurchaseComplete = (result: any) => {\n    setState(prev => ({\n      ...prev,\n      transactions: {\n        ...prev.transactions,\n        completed: [...prev.transactions.completed, result]\n      }\n    }));\n    setShowPurchaseFlow(false);\n  };\n\n  const handlePublishSuccess = (result: any) => {\n    setState(prev => ({\n      ...prev,\n      models: {\n        ...prev.models,\n        published: [...prev.models.published, result]\n      }\n    }));\n  };\n\n  return (\n    <WalletProvider>\n      <Router>\n        <div className=\"app\">\n          <AppHeader />\n          \n          <main className=\"main-content\">\n            <Routes>\n              <Route path=\"/\" element={<Navigate to=\"/marketplace\" replace />} />\n              <Route \n                path=\"/marketplace\" \n                element={\n                  <ModelMarketplace \n                    onModelSelect={handleModelSelect}\n                    onPurchase={handlePurchase}\n                  />\n                } \n              />\n              <Route \n                path=\"/publish\" \n                element={\n                  <ModelPublisher \n                    onPublishSuccess={handlePublishSuccess}\n                  />\n                } \n              />\n              <Route \n                path=\"/my-models\" \n                element={<MyModelsPage />} \n              />\n              <Route \n                path=\"/my-purchases\" \n                element={<ModelDownloader />} \n              />\n              <Route \n                path=\"/model/:id\" \n                element={<ModelDetailsPage />} \n              />\n              <Route \n                path=\"/checkout/:id\" \n                element={<CheckoutPage />} \n              />\n            </Routes>\n          </main>\n\n          <AppFooter />\n\n          {/* Purchase Flow Modal */}\n          {showPurchaseFlow && state.selectedModel && (\n            <div className=\"modal-overlay\">\n              <div className=\"modal\">\n                <PurchaseFlow\n                  model={state.selectedModel}\n                  onPurchaseComplete={handlePurchaseComplete}\n                  onCancel={() => setShowPurchaseFlow(false)}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </Router>\n    </WalletProvider>\n  );\n};\n\n// App Header Component\nconst AppHeader: React.FC = () => {\n  const { connected, address, balance } = useWallet();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  return (\n    <header className=\"app-header\">\n      <div className=\"header-content\">\n        <div className=\"logo\">\n          <h1>DeSciChain</h1>\n          <span className=\"tagline\">ML Models Marketplace</span>\n        </div>\n\n        <nav className={`nav ${isMenuOpen ? 'nav-open' : ''}`}>\n          <a href=\"/marketplace\" className=\"nav-link\">Marketplace</a>\n          <a href=\"/publish\" className=\"nav-link\">Publish</a>\n          <a href=\"/my-models\" className=\"nav-link\">My Models</a>\n          <a href=\"/my-purchases\" className=\"nav-link\">My Purchases</a>\n        </nav>\n\n        <div className=\"header-actions\">\n          <WalletConnectButton />\n          <button\n            className=\"menu-toggle\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n          >\n            â˜°\n          </button>\n        </div>\n      </div>\n    </header>\n  );\n};\n\n// App Footer Component\nconst AppFooter: React.FC = () => {\n  return (\n    <footer className=\"app-footer\">\n      <div className=\"footer-content\">\n        <div className=\"footer-section\">\n          <h3>DeSciChain</h3>\n          <p>Decentralized marketplace for machine learning models</p>\n        </div>\n        \n        <div className=\"footer-section\">\n          <h4>Platform</h4>\n          <ul>\n            <li><a href=\"/marketplace\">Marketplace</a></li>\n            <li><a href=\"/publish\">Publish Model</a></li>\n            <li><a href=\"/about\">About</a></li>\n          </ul>\n        </div>\n        \n        <div className=\"footer-section\">\n          <h4>Support</h4>\n          <ul>\n            <li><a href=\"/help\">Help Center</a></li>\n            <li><a href=\"/docs\">Documentation</a></li>\n            <li><a href=\"/contact\">Contact</a></li>\n          </ul>\n        </div>\n        \n        <div className=\"footer-section\">\n          <h4>Legal</h4>\n          <ul>\n            <li><a href=\"/terms\">Terms of Service</a></li>\n            <li><a href=\"/privacy\">Privacy Policy</a></li>\n            <li><a href=\"/license\">License</a></li>\n          </ul>\n        </div>\n      </div>\n      \n      <div className=\"footer-bottom\">\n        <p>&copy; 2024 DeSciChain. All rights reserved.</p>\n        <p>Powered by Algorand & IPFS</p>\n      </div>\n    </footer>\n  );\n};\n\n// My Models Page Component\nconst MyModelsPage: React.FC = () => {\n  const { connected } = useWallet();\n  const [models, setModels] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (connected) {\n      fetchMyModels();\n    }\n  }, [connected]);\n\n  const fetchMyModels = async () => {\n    try {\n      setLoading(true);\n      // This would fetch models published by the current user\n      // For now, return empty array\n      setModels([]);\n    } catch (error) {\n      console.error('Failed to fetch my models:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!connected) {\n    return (\n      <div className=\"page\">\n        <div className=\"wallet-required\">\n          <h2>My Published Models</h2>\n          <p>Please connect your wallet to view your published models.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-header\">\n        <h2>My Published Models</h2>\n        <a href=\"/publish\" className=\"btn btn-primary\">\n          Publish New Model\n        </a>\n      </div>\n\n      {loading ? (\n        <div className=\"loading\">\n          <div className=\"spinner\"></div>\n          <p>Loading your models...</p>\n        </div>\n      ) : models.length === 0 ? (\n        <div className=\"no-models\">\n          <h3>No Published Models</h3>\n          <p>You haven't published any models yet.</p>\n          <a href=\"/publish\" className=\"btn btn-primary\">\n            Publish Your First Model\n          </a>\n        </div>\n      ) : (\n        <div className=\"my-models\">\n          {models.map((model) => (\n            <div key={model.id} className=\"model-card\">\n              <h3>{model.name}</h3>\n              <p>{model.description}</p>\n              <div className=\"model-stats\">\n                <span>Price: {model.price} ALGO</span>\n                <span>Purchases: {model.purchaseCount}</span>\n                <span>Rating: {model.rating}/5</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Model Details Page Component\nconst ModelDetailsPage: React.FC = () => {\n  const { id } = useParams();\n  const [model, setModel] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (id) {\n      fetchModelDetails(id);\n    }\n  }, [id]);\n\n  const fetchModelDetails = async (modelId: string) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/models/${modelId}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        setModel(data.model);\n      }\n    } catch (error) {\n      console.error('Failed to fetch model details:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"page\">\n        <div className=\"loading\">\n          <div className=\"spinner\"></div>\n          <p>Loading model details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!model) {\n    return (\n      <div className=\"page\">\n        <div className=\"error\">\n          <h2>Model Not Found</h2>\n          <p>The requested model could not be found.</p>\n          <a href=\"/marketplace\" className=\"btn btn-primary\">\n            Browse Models\n          </a>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"page\">\n      <div className=\"model-details\">\n        <h1>{model.name}</h1>\n        <p>{model.description}</p>\n        {/* Add more model details here */}\n      </div>\n    </div>\n  );\n};\n\n// Checkout Page Component\nconst CheckoutPage: React.FC = () => {\n  const { id } = useParams();\n  const [model, setModel] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (id) {\n      fetchModelDetails(id);\n    }\n  }, [id]);\n\n  const fetchModelDetails = async (modelId: string) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/models/${modelId}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        setModel(data.model);\n      }\n    } catch (error) {\n      console.error('Failed to fetch model details:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"page\">\n        <div className=\"loading\">\n          <div className=\"spinner\"></div>\n          <p>Loading checkout...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!model) {\n    return (\n      <div className=\"page\">\n        <div className=\"error\">\n          <h2>Model Not Found</h2>\n          <p>The requested model could not be found.</p>\n          <a href=\"/marketplace\" className=\"btn btn-primary\">\n            Browse Models\n          </a>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"page\">\n      <PurchaseFlow model={model} />\n    </div>\n  );\n};"]